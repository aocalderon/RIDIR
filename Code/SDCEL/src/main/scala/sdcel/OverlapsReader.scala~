package edu.ucr.dblab.sdcel

import com.vividsolutions.jts.geom.{Geometry, Polygon}
import com.vividsolutions.jts.geom.{PrecisionModel, GeometryFactory}
import com.vividsolutions.jts.io.WKTReader
import org.apache.spark.serializer.KryoSerializer
import org.apache.spark.sql.{SparkSession, SaveMode}
import org.apache.spark.sql.functions._
import org.datasyslab.geospark.serde.GeoSparkKryoRegistrator
import org.datasyslab.geospark.serde.GeoSparkKryoRegistrator
import org.datasyslab.geospark.spatialRDD.SpatialRDD
import org.datasyslab.geospark.enums.GridType

import collection.JavaConverters._

object OverlapReader {

  case class Overlap(wkt1: String, wkt2: String, id1: Long, id2:Long)

  def main(args: Array[String]): Unit = {
    val params = new Params(args)
    val model = new PrecisionModel(params.scale())
    implicit val geofactory = new GeometryFactory(model)

    implicit val spark = SparkSession.builder()
        .config("spark.serializer", classOf[KryoSerializer].getName)
        .config("spark.kryo.registrator", classOf[GeoSparkKryoRegistrator].getName)
        .getOrCreate()
    import spark.implicits._

    val data = spark.read.textFile("gadm/overlaps").persist


    val polys = data.map{ p =>
      val arr = p.split("\t")
      Overlap(arr(0), arr(1), arr(2).toLong, arr(3).toLong)
    }.persist

    val groups = polys.groupBy($"id1").agg(collect_list($"id2"))

    groups.filter{ o =>
      val n1 = o.getList[Long](1).asScala.size
      val n2 = o.getList[Long](1).asScala.distinct.size
      n1 != n2
    }.count
  }
}
