{"paragraphs":[{"text":"import scala.io.Source\nimport com.vividsolutions.jts.io.WKTReader\nimport com.vividsolutions.jts.geom.GeometryFactory\n\nval buffer = Source.fromFile(\"/home/acald013/Datasets/cali.wkt\")\nval geofactory: GeometryFactory = new GeometryFactory() \nval reader = new WKTReader(geofactory)\nval printWKT = true\n\nval geoms = buffer.getLines.map{ line =>\n    val arr = line.split(\"\\t\")\n    val id = arr(0)\n    val wkt = arr(1)\n    val geom = reader.read(wkt)\n    geom.setUserData(s\"${id}\")\n    (id, geom)\n}\nimport com.vividsolutions.jts.geom.{Polygon, MultiPolygon}\n\nval report = geoms.map{ case (id, geom) =>                             \n    var feature = \"NONE\"\n    var isValid = false\n    var isSimple = false\n    var n = 0\n    var holes = 0\n    var wkt = \"\"\n    if(geom.isInstanceOf[Polygon]){\n        val polygon = geom.asInstanceOf[Polygon]\n        feature = \"POLY\"\n        isValid = polygon.isValid()\n        isSimple = polygon.isSimple()\n        n = polygon.getNumGeometries\n        holes = polygon.getNumInteriorRing\n    }\n    if(geom.isInstanceOf[MultiPolygon]){                                                          \n        val multipolygon = geom.asInstanceOf[MultiPolygon]                                          \n        feature = \"MULT\"\n        isValid = multipolygon.isValid()\n        isSimple = multipolygon.isSimple()\n        n = multipolygon.getNumGeometries\n        holes = (0 until n).map(g => multipolygon.getGeometryN(g)).map(g => g.asInstanceOf[Polygon].getNumInteriorRing).reduce(_ + _)\n    }              \n    if(printWKT){ wkt = geom.toText}\n    val r = s\"${wkt}\\t${geom.getUserData.toString()}\\t${feature}\\t${isSimple}\\t${isValid}\\t${n}\\t${holes}\\n\"\n    (r, holes)\n}.filter(_._2 > 0)\n.map(_._1)\nval f = new java.io.PrintWriter(\"/tmp/report.txt\")                                              \nf.write(report.mkString(\"\"))                                                                    \nf.close()\n\n","user":"anonymous","dateUpdated":"2019-09-20T17:08:18-0700","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.io.Source\nimport com.vividsolutions.jts.io.WKTReader\nimport com.vividsolutions.jts.geom.GeometryFactory\nbuffer: scala.io.BufferedSource = empty iterator\ngeofactory: com.vividsolutions.jts.geom.GeometryFactory = com.vividsolutions.jts.geom.GeometryFactory@5bf63142\nreader: com.vividsolutions.jts.io.WKTReader = com.vividsolutions.jts.io.WKTReader@41c45408\nprintWKT: Boolean = true\ngeoms: Iterator[(String, com.vividsolutions.jts.geom.Geometry)] = empty iterator\nimport com.vividsolutions.jts.geom.{Polygon, MultiPolygon}\nreport: Iterator[String] = empty iterator\nf: java.io.PrintWriter = java.io.PrintWriter@31815812\n"}]},"apps":[],"jobName":"paragraph_1568598504121_759085763","id":"20190915-184824_320359492","dateCreated":"2019-09-15T18:48:24-0700","dateStarted":"2019-09-20T17:08:18-0700","dateFinished":"2019-09-20T17:08:23-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:234"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1568940886785_940351413","id":"20190919-175446_2107729227","dateCreated":"2019-09-19T17:54:46-0700","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:236"}],"name":"GeometryChecker","id":"2ENY4HFUF","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}