{"paragraphs":[{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1569175998393_-286475680","id":"20190922-111318_2027343695","dateCreated":"2019-09-22T11:13:18-0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1392","text":"case class Edge(v1: Int, v2: Int, id: String){\n    var left = id\n    var right = \"*\"\n    \n    def canEqual(a: Any) = a.isInstanceOf[Edge]\n    \n    override def equals(that: Any): Boolean =\n        that match {\n            case that: Edge => {\n                that.canEqual(this) &&\n                this.v1 == that.v1 &&\n                this.v2 == that.v2 &&\n                this.id == that.id\n            }\n            case _ => false\n        }\n        \n    override def hashCode: Int = {\n        val prime = 31\n        var result = 1\n        result = prime * result + v1;\n        result = prime * result + v2;\n        result = prime * result + (if (id == null) 0 else id.hashCode)\n        result\n    }\n    \n    override def toString() = s\"$id\\t$v1\\t$v2\\t$left\\t$right\"\n}\nimplicit class Crossable[X](xs: Traversable[X]) {\n  def cross[Y](ys: Traversable[Y]) = for { x <- xs; y <- ys } yield (x, y)\n}\n\nval edges = List(Edge(1,2,\"A\"),Edge(2,4,\"A\"),Edge(4,3,\"A\"),Edge(3,1,\"A\"),Edge(3,4,\"B\"),Edge(4,6,\"B\"),Edge(6,5,\"B\"),Edge(5,3,\"B\"),\n                Edge(4,2,\"C\"),Edge(2,7,\"C\"),Edge(7,8,\"C\"),Edge(8,4,\"C\"),Edge(8,9,\"D\"),Edge(9,6,\"D\"),Edge(6,4,\"D\"),Edge(4,8,\"D\"))\n\nval r = edges.cross(edges.map(e => Edge(e.v2, e.v1, e.id))).filter(e => e._1.id < e._2.id).filter(e => e._1.v1 == e._2.v1 && e._1.v2 == e._2.v2)\nval toUpdate = r.map{ p => \n    p._1.right = p._2.id\n    p._1\n} \nval toDelete = r.map(_._1) ++ r.map(e => Edge(e._2.v2, e._2.v1, e._2.id))\n\nedges.toSet.diff(toDelete.toSet).union(toUpdate.toSet).foreach(println)\n\nprintln(r.size)\nr.foreach(println)","dateUpdated":"2019-09-22T12:06:22-0700","dateFinished":"2019-09-22T12:06:22-0700","dateStarted":"2019-09-22T12:06:22-0700","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"B\t5\t3\tB\t*\nA\t3\t1\tA\t*\nD\t9\t6\tD\t*\nA\t2\t4\tA\tC\nA\t4\t3\tA\tB\nB\t6\t5\tB\t*\nC\t8\t4\tC\tD\nA\t1\t2\tA\t*\nC\t7\t8\tC\t*\nB\t4\t6\tB\tD\nD\t8\t9\tD\t*\nC\t2\t7\tC\t*\n4\n(A\t2\t4\tA\tC,C\t2\t4\tC\t*)\n(A\t4\t3\tA\tB,B\t4\t3\tB\t*)\n(B\t4\t6\tB\tD,D\t4\t6\tD\t*)\n(C\t8\t4\tC\tD,D\t8\t4\tD\t*)\ndefined class Edge\ndefined class Crossable\nedges: List[Edge] = List(A\t1\t2\tA\t*, A\t2\t4\tA\tC, A\t4\t3\tA\tB, A\t3\t1\tA\t*, B\t3\t4\tB\t*, B\t4\t6\tB\tD, B\t6\t5\tB\t*, B\t5\t3\tB\t*, C\t4\t2\tC\t*, C\t2\t7\tC\t*, C\t7\t8\tC\t*, C\t8\t4\tC\tD, D\t8\t9\tD\t*, D\t9\t6\tD\t*, D\t6\t4\tD\t*, D\t4\t8\tD\t*)\nr: Traversable[(Edge, Edge)] = List((A\t2\t4\tA\tC,C\t2\t4\tC\t*), (A\t4\t3\tA\tB,B\t4\t3\tB\t*), (B\t4\t6\tB\tD,D\t4\t6\tD\t*), (C\t8\t4\tC\tD,D\t8\t4\tD\t*))\ntoUpdate: Traversable[Edge] = List(A\t2\t4\tA\tC, A\t4\t3\tA\tB, B\t4\t6\tB\tD, C\t8\t4\tC\tD)\ntoDelete: Traversable[Edge] = List(A\t2\t4\tA\tC, A\t4\t3\tA\tB, B\t4\t6\tB\tD, C\t8\t4\tC\tD, C\t4\t2\tC\t*, B\t3\t4\tB\t*, D\t6\t4\tD\t*, D\t4\t8\tD\t*)\n"}]}},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1569176170887_-1725593678","id":"20190922-111610_1566936300","dateCreated":"2019-09-22T11:16:10-0700","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1469"}],"name":"EdgeFilter","id":"2EQNN3GVZ","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}