case class Vertex(x: Double, y: Double) extends Ordered[Vertex] {
  override def compare(that: Vertex): Int = {
    if (x == that.x) y compare that.y
    else x compare that.x
  }

  def canEqual(a: Any) = a.isInstanceOf[Vertex]

  override def equals(that: Any): Boolean =
    that match {
      case that: Vertex => {
        that.canEqual(this) && this.x == that.x && this.y == that.y
      }
      case _ => false
    }

  def toWKT: String = s"POINT ($x $y)"
}

case class Edge(v1: Vertex, v2: Vertex, var label: String = "") extends Ordered[Edge] {
  override def compare(that: Edge): Int = {
    if (v2.x == that.v2.x) v2.y compare that.v2.y
    else v2.x compare that.v2.x
  }

  def canEqual(a: Any) = a.isInstanceOf[Edge]

  override def equals(that: Any): Boolean =
    that match {
      case that: Edge => {
        that.canEqual(this) && ( this.v1.equals(that.v1) && this.v2.equals(that.v2) )
      }
      case _ => false
    }

  def left: String = label.split("|")(0)

  def right: String = label.split("|")(1)

  def toWKT: String = s"LINESTRING(${v1.x} ${v1.y}, ${v2.x} ${v2.y})\t${label}"
}

val e1 = Edge(Vertex(0.0, 0.0), Vertex(7.0, 0.0), "0")
val e2 = Edge(Vertex(7.0, 0.0), Vertex(5.0, 2.0), "0")
val e3 = Edge(Vertex(5.0, 2.0), Vertex(2.0, 2.0), "0")
val e4 = Edge(Vertex(2.0, 2.0), Vertex(0.0, 0.0), "0")
val e5 = Edge(Vertex(7.0, 0.0), Vertex(7.0, 7.0), "1")
val e6 = Edge(Vertex(7.0, 7.0), Vertex(5.0, 5.0), "1")
val e7 = Edge(Vertex(5.0, 5.0), Vertex(5.0, 2.0), "1")
val e8 = Edge(Vertex(5.0, 2.0), Vertex(7.0, 0.0), "1")
val e9 = Edge(Vertex(0.0, 7.0), Vertex(2.0, 5.0), "2")
val e10 = Edge(Vertex(2.0, 5.0), Vertex(5.0, 5.0), "2")
val e11 = Edge(Vertex(5.0, 5.0), Vertex(7.0, 7.0), "2")
val e12 = Edge(Vertex(7.0, 7.0), Vertex(0.0, 7.0), "2")
val e13 = Edge(Vertex(0.0, 7.0), Vertex(0.0, 0.0), "3")
val e14 = Edge(Vertex(0.0, 0.0), Vertex(2.0, 2.0), "3")
val e15 = Edge(Vertex(2.0, 2.0), Vertex(2.0, 5.0), "3")
val e16 = Edge(Vertex(2.0, 5.0), Vertex(0.0, 7.0), "3")
val e17 = Edge(Vertex(2.0, 2.0), Vertex(5.0, 2.0), "4")
val e18 = Edge(Vertex(5.0, 2.0), Vertex(5.0, 5.0), "4")
val e19 = Edge(Vertex(5.0, 5.0), Vertex(2.0, 5.0), "4")
val e20 = Edge(Vertex(2.0, 5.0), Vertex(2.0, 2.0), "4")

val edges = List(e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, e16, e17, e18, e19, e20)

val edges1 = edges.map(e => Edge(e.v1, e.v2) -> e.label).toMap                                                                                                                                                       
val edges2 = edges.map(e => Edge(e.v2, e.v1) -> e.label).toMap                                                                                                                                        
val keys = (edges1.keySet ++ edges2.keySet).filter(e => e.v1 < e.v2)
val edgesSet = keys.map{ e => (e, s"${edges1.getOrElse(e, "*")}|${edges2.getOrElse(e, "*")}") }

